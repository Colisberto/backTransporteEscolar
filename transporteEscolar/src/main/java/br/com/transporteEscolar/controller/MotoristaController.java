package br.com.transporteEscolar.controller;

import br.com.transporteEscolar.model.Motorista;
import br.com.transporteEscolar.model.Turno;
import br.com.transporteEscolar.repository.MotoristaRepository;
import br.com.transporteEscolar.repository.MotoristaRepositoryJPA;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.Optional;

@CrossOrigin
@RestController // This means that this class is a Controller
@RequestMapping(path="/api/motorista") // This means URL's start with /demo (after Application path)
public class MotoristaController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MotoristaRepository motoristaRepository;

    @Autowired
    private MotoristaRepositoryJPA motoristaRepositoryJPA;

    @PostMapping("/add")
    protected @Valid Motorista addMotorista(@Valid @RequestBody Motorista motorista) {

        return motoristaRepository.save(motorista);

    }

    // ------------------- Update Motorista ------------------------------------------------

    @PutMapping(value = "/edit")
    protected @Valid Motorista editMotorista(@Valid @RequestBody Motorista motorista) {

        return motoristaRepository.save(motorista);
    }
    // ------------------- buscar motorista por id ------------------------------------------------

    @RequestMapping(value="/get/{id}", method=RequestMethod.GET)
    public @ResponseBody
    Optional<Motorista> getMotoristaByI(@PathVariable(name = "id") long id) {

        return motoristaRepository.findById(id);
    }

    @GetMapping(path="/all", produces= MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody Iterable<Motorista> getAllMotorista() {
        // This returns a JSON or XML with the users
        return motoristaRepository.findAll();
    }

    // ------------------- Deleta Motorista ------------------------------------------------

    @DeleteMapping(value="/delete/{id}")
    public @ResponseBody void deleteMotorista(@PathVariable(name = "id") long id) {
        Motorista motorista =  new Motorista();
        motorista.setId(id);
        motoristaRepository.deleteById(motorista.getId());
    }

//    @GetMapping(path="/idAll", produces= MediaType.APPLICATION_JSON_VALUE)
//    public @ResponseBody Iterable<Turma> getTurmasByIdAluno(@RequestParam("id") long id) {
//        // This returns a JSON or XML with the users
//        return alunoRepositoryJPA.listaTurmaByIdAluno(id);
//    }

   /* @RequestMapping(value="/onibus/{id}", method=RequestMethod.GET)
    public @ResponseBody Iterable<Onibus> getOnibusByIdAluno(@PathVariable(name = "id") long id) {
        Iterable<Onibus> onibus = alunoRepositoryJPA.listaOnibusByIdAluno(id);
        onibus.forEach(onibuss -> {onibuss.setAlunos(null);});
        return onibus;
    }*/

}